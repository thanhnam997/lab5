-These lines select the submit button and the paragraph element where the order summary will be displayed, using their respective IDs (submit-order and order-summary).
let submitButton = document.querySelector('#submit-order');
let orderSummaryParagraph = document.querySelector('#order-summary');

submitButton.addEventListener('click', function() { --> This sets up an event listener for the click event on the submit button. When the button is clicked, the function inside the event listener is executed.
    


These lines retrieve the values entered by the user in various input fields. These values represent the information provided by the user on the form.
// Get values from input fields
   let name = homeownerNameInput.value;
    let houseNumber = homeownerHouseNumberInput.value;
    let streetName = homeownerStreetNameInput.value;
    let city = cityInput.value;
    let state = document.querySelector('#state').value; // Minnesota
    let zipCode = zipCodeInput.value;
    let selectedTree = treeTypeSelect.options[treeTypeSelect.selectedIndex].text;




This line calls the validateForm function, passing the input values as arguments. The result is an object (validationResult) containing information about whether the form is valid and any error messages.
    // Validate the form inputs
    let validationResult = validateForm(name, houseNumber, streetName, city, zipCode);


This block checks if the form is valid based on the isValid property of the validationResult object. If it's valid, it calls the displayConfirmation function to show a confirmation message. Otherwise, it displays an error message with details about what went wrong.
    if (validationResult.isValid) {
        // Display confirmation message if form is valid
        displayConfirmation(name, houseNumber, streetName, city, state, zipCode, selectedTree);
    } else {
        // Display error messages if form is invalid
        orderSummaryParagraph.innerHTML = `<strong>Error(s) occurred:</strong><br>${validationResult.errorMessages.join('<br>')}`;
    }
});



This function contains the logic to validate the form inputs. It checks if certain fields are empty or if the zip code is a 5-digit number. It returns an object with isValid indicating whether the form is valid and errorMessages containing any error messages.
// Function to validate the form inputs
function validateForm(name, houseNumber, streetName, city, zipCode) {
    let errorMessages = [];

    if (!name) {
        errorMessages.push('Homeowner name is required.');
    }

    if (!houseNumber) {
        errorMessages.push('House number is required.');
    }

    if (!streetName) {
        errorMessages.push('Street name is required.');
    }

    if (!city) {
        errorMessages.push('City is required.');
    }

    if (!zipCode || isNaN(zipCode) || zipCode.length !== 5) {
        errorMessages.push('Zip code is required and must be a 5-digit number.');
    }

    // Additional validation logic can be added if needed

    return {
        isValid: errorMessages.length === 0,
        errorMessages: errorMessages
    };
}




This function constructs an order summary message using template literals, including the user's entered information, and updates the HTML of the orderSummaryParagraph element to display this summary.
// Function to display confirmation message
function displayConfirmation(name, houseNumber, streetName, city, state, zipCode, selectedTree) {
    let orderSummary = `
        <strong>Order Summary:</strong><br>
        <strong>Homeowner:</strong> ${name}<br>
        <strong>Address:</strong> ${houseNumber} ${streetName}, ${city}, ${state} ${zipCode}<br>
        <strong>Tree Type:</strong> ${selectedTree}
    `;
    orderSummaryParagraph.innerHTML = orderSummary;
}
